name: PR Merge Check
on: [pull_request]
env:
  BEFORE_SHA: ${{ github.event.before }}
jobs:
  blackduck_scan:
    uses: cdk-prod/devops-reusable-workflows/.github/workflows/blackduck-scan.yml@master
    secrets: inherit
    with:
      blackduck_project_name: '' #PortfolioName_ProductName_asset-name

  coverity_scan:
    # Uncomment the appropriate workflow for Coverity:
    uses: cdk-prod/devops-reusable-workflows/.github/workflows/Coverity_Linux.yml@master # For coverity on Linux machines
    #uses: cdk-prod/devops-reusable-workflows/.github/workflows/Coverity_Windows.yml@master # For coverity on Windows machines
    secrets: inherit
    with:
      stream_name: '' # Stream name as configured in CDK Coverity server
      #working_directory: . # Directory where .sln file exists for dotnet applications
  unit_test:
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - run: git fetch origin master
      - name: Add Node to PATH
        run: |
          echo "/opt/node-v14.17.0-linux-x64/bin/" >> $GITHUB_PATH
      # - run: git fetch origin master
      - run: npm install
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3
        with:
          main-branch-name: 'master'
      - run: |
          echo "BASE-: ${{ env.NX_BASE }}"
          echo "HEAD: ${{ env.NX_HEAD }}"
      - name: Run Affected Test
        shell: bash
        run: npx nx affected:test --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} --with-deps
      - name: Run Affected build
        shell: bash
        run: npx nx affected:build --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}  --with-deps
      - run:
          npx nx affected --target=docker-build --base=${{ env.NX_BASE }}  --head=${{ env.NX_HEAD }} --tag "test" \
          --label "runnumber=${GITHUB_RUN_ID}" \
          --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}"
      - name: Test Deploy Affected Projects
        run: |
          product=$(npx nx print-affected --type=app --select=projects --base=${{ env.NX_BASE }}  --head=${{ env.NX_HEAD }} )
          echo "productreleaselist=$product" >> $GITHUB_ENV
          echo Asset Config: $product
      - name: Test Deploy Affected Projects1
        run: echo ${{ env.productreleaselist }}

      - name: Deploy HTML
        if: contains(env.productreleaselist, 'html')
        run: echo 'HTML will get deployed'
      - name: Tests âœ…
        if: ${{ success() }}
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
          "context": "tests",
          "state": "success",
          "description": "Tests passed",
          "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'

      - name: Tests ðŸš¨
        if: ${{ failure() }}
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
          "context": "tests",
          "state": "failure",
          "description": "Tests failed",
          "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
